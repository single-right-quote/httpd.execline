#!/binaries/execlineb -WS1
# expects a start line from an http request from standard input  
# exits syntax error otherwise
#
# current hard dependencies on `httpd.execline` subscripts:
#
# + ./get-line-from-client.execline
# + ./http-error-response.execline: and, thus
# + ./log.execline
#
# on success, exports
#
# + http_start_line_parse_method
# + http_start_line_parse_resource
# + http_start_line_parse_version
#
# containing the request's method, requested resource, and http version
# it then exec(3p)s into its command line

backtick -i -n start_line { get-line-from-client.execline }
backtick -I -n http_start_line_parse_method {
	pipeline { printenv start_line }
	pipeline { sed -n "s@^(CONNECT|DELETE|GET|HEAD|OPTIONS|PATCH|POST|PUT|TRACE) +.*@\\1@p" }
	read
}
backtick -I -n http_start_line_parse_resource {
	pipeline { printenv start_line }
	pipeline { sed -n "s@^[^ ]+ +(/[^ ]*) +.*@\\1@p" }
	read
}
backtick -I -n http_start_line_parse_version {
	pipeline { printenv start_line }
	pipeline { sed -n "s@.*HTTP/([0-9]\.[0-9]) *@\\1@p" }
	read
}

importas -i -u start_line start_line
ifelse {
	s6-test ! -v http_start_line_parse_method -o
		! -v http_start_line_parse_resource -o
		! -v http_start_line_parse_version
}
{
	http-error-response.execline
		400
		"syntax error"
		"http-start-line-parse.execline: (bad) start line: \""${start_line}\"
}

${@}
