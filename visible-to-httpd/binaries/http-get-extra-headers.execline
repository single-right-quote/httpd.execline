#!/binaries/execlineb -WS0
#
# http-get-particular-headers.execline [status-code]
#
# sufficiently annoyingly complex resource-specific HTTP header logic that
# gets reused a lot
#
# headers are specified in a header directory, which has a file for each
# header you wish to send; this imposes structure with almost no parsing at all
#
# exploiting the filesystem as more or less a map (as opposed to the trivial
# implementation: using a single file containing the desired headers) means the
# user need not bother with editing files containing `\r\n`s
# (however, it is almost certainly considerably more annoying to use)
#
# TODO: ? status code overrides support??
# TODO: write a GUI?? with like, `yad(1)` or something??? idk

multisubstitute {
	importas -D -no_hostname_parsed hostname http_header_parse_Host
	importas -D -no_resource_parsed resource resource
}

elglob -0 -s error_response_page_headers configuration/error_response_pages/${1}/headers/*
elglob -0 -s resource_headers configuration/overrides/${resource}/headers/*
elglob -0 -s hostname_headers configuration/default_headers/${hostname}/*
elglob -0 -s fallback_headers configuration/default_headers/-fallback/*

if { s6-echo -n -- "\r\n" }
http-print-header-directories.execline
	${error_response_page_headers}
	${resource_headers}
	${hostname_headers}
	${fallback_headers}
